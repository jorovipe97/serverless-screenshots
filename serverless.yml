# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: adb-serverless-screenshots
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

custom:
  # change this, so it's unique for your setup
  bucket_name: ${self:provider.stage,opt:stage}-${env:USER}-screenshots

  # these variables are passed on through ApiGateway, to be used
  # in your functions in the event.stageVariables
  stageVariables:
    bucketName: ${self:custom.bucket_name}
    endpoint: {"Fn::Join": ["", ["https://", { "Fn::GetAtt": "CloudFrontEndpoint.DomainName" }, "/"]]}

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: us-east-1

  # We want to lock down the ApiGateway, so we can control who can use the api
  apiGateway:
    apiKeys:
      - adb-thumbnail-api-key

  # We need to give the lambda functions access to list and write to our bucket, it needs:
  # - to be able to 'list' the bucket
  # - to be able to upload a file (PutObject)
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
              - "s3:ListBucket"
              - "s3:PutObject"
          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ThumbnailBucket" } ] ]  }

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  takeScreenshot:
    handler: src/take-screenshot.takeScreenshot
    timeout: 15  # our screenshots can take a while sometimes
    events:
      - http:
          path: /screenshot
          method: post
          # Marking the function as private will require a valid api-key
          private: true
          request:
            # we want to mark the url param as required
            parameters:
              querystrings:
                url: true
 
  # listScreenshots:
  #   handler: handler.list_screenshots
  #   timeout: 15
  #   events:
  #     - http:
  #         path: screenshots
  #         method: get
  #         private: true
  #         request:
  #           parameters:
  #             querystrings:
  #               url: true
 
  # createThumbnails:
  #   handler: handler.create_thumbnails
  #   events:
  #     # this event type will also create the screenshots bucket and trigger
  #     # the lambda function every time a file is uploaded (ObjectCreated)
  #     - s3:
  #         bucket: ${self:custom.bucket_name}
  #         event: s3:ObjectCreated:*
          
resources:
  # Resources:
    # Create an endpoint for the S3 bucket in CloudFront
    # this configuration basically just sets up a forwarding of requests
    # to S3, and forces all traffic to https
    # CloudFrontEndpoint:
    #   Type: AWS::CloudFront::Distribution
    #   Properties:
    #     DistributionConfig:
    #       Enabled: True
    #       DefaultCacheBehavior:
    #         TargetOriginId: ScreenshotBucketOrigin
    #         ViewerProtocolPolicy: redirect-to-https
    #         ForwardedValues:
    #           QueryString: True
    #       Origins:
    #         -
    #           Id: ScreenshotBucketOrigin
    #           DomainName: ${self:custom.bucket_name}.s3.amazonaws.com
    #           CustomOriginConfig:
    #             OriginProtocolPolicy: http-only
  Outputs:
    ScreenshotBucket:
      Description: "Screenshot bucket name"
      Value: ${self:custom.bucket_name}
    # CloudFrontUrl:
    #   Description: "CloudFront url"
    #   Value: {"Fn::GetAtt": "CloudFrontEndpoint.DomainName"}

plugins:
- serverless-plugin-stage-variables
- serverless-plugin-stack-outputs
