service: adb-serverless-screenshots

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

custom:
  # change this, so it's unique for your setup
  bucket_name: ${opt:stage, self:provider.stage}-${env:USER}-screenshots

  # these variables are passed on through ApiGateway, to be used
  # in your functions in the event.stageVariables
  stageVariables:
    bucketName: ${self:custom.bucket_name}

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: us-east-1

  # We want to lock down the ApiGateway, so we can control who can use the api
  apiGateway:
    apiKeys:
      - adb-thumbnail-api-key

  ecr:
    # In this section you can define images that will be built locally and uploaded to ECR
    images:
      appimage:
        path: ./
        file: Dockerfile

  # We need to give the lambda functions access to list and write to our bucket, it needs:
  # - to be able to 'list' the bucket
  # - to be able to upload a file (PutObject)
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
              - "s3:ListBucket"
              - "s3:PutObject"
          Resource:
            - { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ThumbnailBucket" } ] ] }
            - { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ThumbnailBucket" }, "/*" ] ] }

# To speed up the packaging upload.
package:
  exclude:
    - node_modules/**

functions:
  takeScreenshot:
    # If image is supplied, handler is not passed.
    # instead is defined directly in the Dockerfile.
    # handler: src/take-screenshot.handler
    # https://www.serverless.com/framework/docs/providers/aws/guide/functions#referencing-container-image-as-a-target
    image:
      name: appimage
      # You can Re-use the same container for multiple functions
      # this is out-of-the-box supported by public.ecr.aws/lambda/nodejs:14 image.
      # https://www.serverless.com/blog/container-support-for-lambda#re-using-the-same-container-for-multiple-functions
      command:
        - src/take-screenshot.takeScreenshot
      entryPoint:
        - '/lambda-entrypoint.sh'
    # This is the max timeout allowed by API Gateway integrations.
    # https://docs.aws.amazon.com/apigateway/latest/developerguide/limits.html#api-gateway-execution-service-limits-table
    timeout: 30  # our screenshots can take a while sometimes
    memorySize: 1536
    events:
      - http:
          path: /screenshot
          method: post
          # Marking the function as private will require a valid api-key
          private: true
          request:
            # we want to mark the url param as required
            parameters:
              querystrings:
                url: true

  # listScreenshots:
  #   handler: handler.list_screenshots
  #   timeout: 15
  #   events:
  #     - http:
  #         path: screenshots
  #         method: get
  #         private: true
  #         request:
  #           parameters:
  #             querystrings:
  #               url: true
 
  # createThumbnails:
  #   handler: handler.create_thumbnails
  #   events:
  #     # this event type will also create the screenshots bucket and trigger
  #     # the lambda function every time a file is uploaded (ObjectCreated)
  #     - s3:
  #         bucket: ${self:custom.bucket_name}
  #         event: s3:ObjectCreated:*
          
resources:
  Resources:
    ThumbnailBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucket_name}
    # Create an endpoint for the S3 bucket in CloudFront
    # this configuration basically just sets up a forwarding of requests
    # to S3, and forces all traffic to https
    # CloudFrontEndpoint:
    #   Type: AWS::CloudFront::Distribution
    #   Properties:
    #     DistributionConfig:
    #       Enabled: True
    #       DefaultCacheBehavior:
    #         TargetOriginId: ScreenshotBucketOrigin
    #         ViewerProtocolPolicy: redirect-to-https
    #         ForwardedValues:
    #           QueryString: True
    #       Origins:
    #         -
    #           Id: ScreenshotBucketOrigin
    #           DomainName: ${self:custom.bucket_name}.s3.amazonaws.com
    #           CustomOriginConfig:
    #             OriginProtocolPolicy: http-only
  Outputs:
    ScreenshotBucket:
      Description: "Screenshot bucket name"
      Value: ${self:custom.bucket_name}
    # CloudFrontUrl:
    #   Description: "CloudFront url"
    #   Value: {"Fn::GetAtt": "CloudFrontEndpoint.DomainName"}

plugins:
- serverless-plugin-stage-variables
- serverless-plugin-stack-outputs
